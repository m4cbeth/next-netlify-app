generator client {
  provider        = "prisma-client-js"
  // engineType      = "binary"
  // previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}




// ==========================
// model Messages {
//   message   String?
//   name      String?  @db.VarChar(255)
//   id        Int      @id @default(autoincrement())
//   email     String?  @db.VarChar(255)
//   userID    Int?
//   createdAt DateTime @db.Timestamptz(6)
//   updatedAt DateTime @db.Timestamptz(6)
// }

// model User {
//   id             Int       @id @default(autoincrement())
//   name           String?
//   hashedPassword String?
//   email          String?   @unique
//   emailVerified  DateTime?
//   image          String?
//   createdAt      DateTime  @default(now())
//   updatedAt      DateTime  @updatedAt
//   accounts       Account[]
//   sessions       Session[]

//   @@map("user")
// }

// model Account {
//   id                Int     @id @default(autoincrement())
//   type              String
//   provider          String
//   providerAccountId String
//   token_type        String?
//   refresh_token     String?
//   access_token      String?
//   id_token          String?
//   scope             String?
//   session_state     String?
//   expires_at        Int?

//   user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId Int

//   @@unique([provider, providerAccountId])
//   @@map("account")
// }

// model Session {
//   id      String   @id @default(cuid())
//   userId  Int
//   user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   expires DateTime

//   @@map("session")
// }


// ---------------

// model Products {
//   product     String   @db.VarChar(255)
//   id          Int      @id @default(autoincrement())
//   description String?  @db.VarChar(255)
//   price       Float?
//   createdAt   DateTime @db.Timestamptz(6)
//   updatedAt   DateTime @db.Timestamptz(6)
// }

// model User {
//   id             String    @id
//   name           String?
//   hashedPassword String?
//   email          String?   @unique
//   emailVerified  DateTime?
//   image          String?
//   createdAt      DateTime  @default(now())
//   updatedAt      DateTime  @updatedAt

//   @@map("user")
// }

// model Account {
//   id                Int  @id @default(autoincrement())
//   type              String
//   provider          String
//   providerAccountId String
//   token_type        String?
//   refresh_token     String? 
//   access_token      String? 
//   id_token          String? 
//   scope             String?
//   session_state     String?
//   expires_at        Int?

//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId String 

//   @@unique([provider, providerAccountId])
//   @@map("account")
// }

// model Session {
//   id       String @id @default(cuid())
//   userId   String
//   user     User   @relation(fields: [userId], references: [id])
//   expires  DateTime
// }
